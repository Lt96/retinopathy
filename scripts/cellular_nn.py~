#-*-coding=utf8-*-

import scipy.signal as sig
import scipy.integrate as sint
import Image as img
import numpy as np
import os.path
import warnings

#Ignore warnings
warnings.filterwarnings("ignore")

class CellularNN(object):
       
    def update(self, x, t):
        print x.shape
        x = x.reshape((self.n, self.m))
        dx = -x + self.Ib + self.Bu + sig.convolve2d(self.kernel(x), self.tempA, 'same')
        return dx.ravel()
        
        x = x.reshape((self.n, self.m))
        dx = -x + self.Ib + self.Bu + sig.convolve2d(self.cnn(x), self.tempA, 'same')
        return dx.reshape(self.m*self.n)

    def kernel(self, x):
        return 0.5 * (abs(x + 1) - abs(x - 1))

    def process(self, inputlocation, outputlocation, tempA, tempB, initialcondition, Ib, t):
        gray = img.open(inputlocation).convert('RGB')
        print gray
        imh.show_image(gray)
        self.m, self.n = gray.size
        u = np.array(gray)
        u = u[:,:,0]
        z0 = (u)*initialcondition
        self.Bu = sig.convolve2d(u, tempB, 'same')
        self.tempA = tempA
        self.Ib = Ib
        z0 = z0.reshape(z0.size)
        z = self.cnn(sint.odeint(self.f, z0, t))
        l = z[z.shape[0]-1,:].reshape((self.n, self.m))
        l = l/(255.0)
        for i in range(l.shape[0]):
            for j in range(l.shape[1]):
                l[i][j] = np.uint8(round(l[i][j]*255))
        l = img.fromarray(l).convert('RGB')
        l.save(outputlocation)
        print "Image Processing is successful."
        return
    
    def edgedetection(self, inputlocation, outputlocation):
        print "Edge detection is initialized ... "
        tempA = np.array([[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]])
        tempB = np.array([[-1.0, -1.0, -1.0], [-1.0, 8.0, -1.0], [-1.0, -1.0, -1.0]])
        Ib = -1.0
        t = np.linspace(0, 10.0, num=2)
        initialcondition = 0.0
        self.process(img, tempA, tempB, initialcondition, Ib, t)
        print "Edge detection of image "+ inputlocation +" is complete and saved at " + outputlocation + '\n'
