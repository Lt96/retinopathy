# -*- coding: utf-8 -*-
"""
Created on Sun Sep 06 22:10:57 2015

@author: Artem S.
"""

import os
import glob
from math import sqrt
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.pyplot import imshow, figure


class ImLibException(Exception):
    pass


def load_image(path):
    return np.asarray(Image.open(path)) / 255.0


def save_image(path, img):
    tmp = np.asarray(img * 255.0, dtype=np.uint8)
    Image.fromarray(tmp).save(path)


def show_image(img, fig_size=(10, 10)):
    figure(figsize=fig_size)
    imshow(img, cmap=cm.Greys_r)


def rmse(img, cleaned_img):
    return sqrt(np.mean((img - cleaned_img) ** 2))  
    # runs almost 2x times faster than sklearn.metrics.mean_square_error


def load_set(folder, shuffle=False):
    img_list = sorted(glob.glob(os.path.join(folder, '*.png')) + \
                      glob.glob(os.path.join(folder, '*.jpg')) + \
                      glob.glob(os.path.join(folder, '*.jpeg')))
    if shuffle:
        np.random.shuffle(img_list)
    data = []
    filenames = []
    for img_fn in img_list:
        img = load_image(img_fn)
        data.append(img)
        filenames.append(img_fn)
    return data, filenames


def rgb_to_grayscale(rgb_img):
    gs_img = 0.299 * rgb_img[:, :, 0] + 0.587 * rgb_img[:, :, 1] + 0.114 * rgb_img[:, :, 2]
    return gs_img


def pxl_distr(img):
    plt.hist(img.ravel(), bins=100)


def plot_subfigures(imgs, title=None, fig_size=None, contrast_normalize=False):
    if len(imgs.shape) == 4 and imgs.shape[0] == 1:
        imgs = imgs.reshape((imgs.shape[1], imgs.shape[2], imgs.shape[3]))
    if len(imgs.shape) == 2:
        # One picture
        if title is not None:
            plt.title(title)
        show_image(imgs)
    
    elif len(imgs.shape) == 3:
        # Multiple pictures in one row
        if fig_size is None:
            fig, axes = plt.subplots(nrows=1, ncols=imgs.shape[0])
                                     #figsize=(20, 20))
        else:
            fig, axes = plt.subplots(nrows=1, ncols=imgs.shape[0],
                                     figsize=fig_size)
        plt.gray()
        if title is not None:
            fig.suptitle(title, fontsize=12)
        for i in xrange(imgs.shape[0]):
            axes[i].axis('off')
            axes[i].set_xticks([])
            axes[i].set_yticks([])
            if contrast_normalize:
                axes[i].imshow(imgs[i])
            else:
                # Normalizing contrast for each image
                vmin, vmax = imgs[i].min(), imgs[i].max()
                axes[i].imshow(imgs[i], vmin=vmin, vmax=vmax)
            
    elif len(imgs.shape) == 4:
        # Multiple pictures in a few rows
        if fig_size is None:
            fig, axes = plt.subplots(nrows=imgs.shape[0], ncols=imgs.shape[1])
                                     #figsize=(20, 20))
        else:
            fig, axes = plt.subplots(nrows=imgs.shape[0], ncols=imgs.shape[1],
                                     figsize=fig_size)
        plt.gray()
        if title is not None:
            fig.suptitle(title, fontsize=12)
        for i in xrange(imgs.shape[0]):
            for j in xrange(imgs.shape[1]):
                axes[i][j].axis('off') 
                axes[i][j].set_xticks([])
                axes[i][j].set_yticks([])
                if contrast_normalize:
                    axes[i][j].imshow(imgs[i][j])
                else:
                    # Normalizing contrast for each image
                    vmin, vmax = imgs[i][j].min(), imgs[i][j].max()
                    axes[i][j].imshow(imgs[i][j], vmin=vmin, vmax=vmax)
    else:
        raise ImLibException("imgs array contains 3D set of images or deeper")